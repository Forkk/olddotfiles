#
# This shell prompt config file was created by promptline.vim
#

function __promptline_last_exit_code {

  [[ $last_exit_code -gt 0 ]] || return 1;

  printf "%s" "${1}$last_exit_code${2}"
}
function __promptline_vcs_branch {
  local branch
  local branch_symbol="î‚  "

  # git
  if hash git 2>/dev/null; then
    if branch=$( { git symbolic-ref --quiet HEAD || git rev-parse --short HEAD; } 2>/dev/null ); then
      branch=${branch##*/}
      printf "%s" "${1}${branch_symbol}${branch:-unknown}${2}"
      return
    fi
  fi
}
function __promptline_cwd {
  local cwd="${PWD/#$HOME/~}"
  local dir_limit=3
  local parts
  local dir_sep=" î‚± "
  local truncation="â‹¯"

  # get first char of the path, i.e. tilda or slash
  if [[ -n ${ZSH_VERSION-} ]]; then
    local root_char=$cwd[1,1]
  else
    local root_char=${cwd::1}
  fi

  # cleanup leading tilda and slash. replace slashes with spaces
  cwd="${cwd#\~}"
  cwd="${cwd#\/}"
  cwd=${cwd//\// }

  if [[ -n ${ZSH_VERSION-} ]]; then
    parts=($root_char ${=cwd})
  else
    parts=($root_char $cwd)
  fi

  # truncate dirs to the limit
  local parts_count=${#parts[@]}
  if [ $parts_count -gt $dir_limit ] && [ $dir_limit -gt -0 ]; then
    parts=($truncation ${parts[@]:(-3)})
  fi

  # join the dirs with the separator
  local formatted_cwd=""
  for part in "${parts[@]}"; do
    formatted_cwd="$formatted_cwd$dir_sep$part"
  done;
  formatted_cwd="${formatted_cwd#$dir_sep}"

  printf "%s" "$formatted_cwd"
}
function __promptline {
  local last_exit_code="$?"

  local esc=$'[' end_esc=m
  if [[ -n ${ZSH_VERSION-} ]]; then
    local noprint='%{' end_noprint='%}'
  else
    local noprint='\[' end_noprint='\]'
  fi
  local wrap="$noprint$esc" end_wrap="$end_esc$end_noprint"
  local space=" "
  local sep="î‚°"
  local rsep="î‚²"
  local alt_sep="î‚±"
  local alt_rsep="î‚³"
  local reset="${wrap}0${end_wrap}"
  local reset_bg="${wrap}49${end_wrap}"
  local a_fg="${wrap}38;5;220${end_wrap}"
  local a_bg="${wrap}48;5;166${end_wrap}"
  local a_sep_fg="${wrap}38;5;166${end_wrap}"
  local b_fg="${wrap}38;5;231${end_wrap}"
  local b_bg="${wrap}48;5;31${end_wrap}"
  local b_sep_fg="${wrap}38;5;31${end_wrap}"
  local c_fg="${wrap}38;5;250${end_wrap}"
  local c_bg="${wrap}48;5;240${end_wrap}"
  local c_sep_fg="${wrap}38;5;240${end_wrap}"
  local warn_fg="${wrap}38;5;231${end_wrap}"
  local warn_bg="${wrap}48;5;52${end_wrap}"
  local warn_sep_fg="${wrap}38;5;52${end_wrap}"
  local y_fg="${wrap}38;5;250${end_wrap}"
  local y_bg="${wrap}48;5;236${end_wrap}"
  local y_sep_fg="${wrap}38;5;236${end_wrap}"
  if [[ -n ${ZSH_VERSION-} ]]; then
    PROMPT=""${a_fg}${a_bg}${space}"$(if [[ -n ${ZSH_VERSION-} ]]; then print %m; else printf "%s" \\h; fi)"$space${a_sep_fg}""${b_bg}${sep}${b_fg}${b_bg}${space}"$USER"$space${b_sep_fg}""${c_bg}${sep}${c_fg}${c_bg}${space}"$(__promptline_cwd)"$space${c_sep_fg}"${reset_bg}${sep}$reset$space"
    RPROMPT="$(__promptline_last_exit_code "${warn_sep_fg}${rsep}${warn_fg}${warn_bg}${space}" "$space${warn_sep_fg}")$(__promptline_vcs_branch "${y_sep_fg}${rsep}${y_fg}${y_bg}${space}" "$space${y_sep_fg}")${reset}"
  else
    PS1=""${a_fg}${a_bg}${space}"$(if [[ -n ${ZSH_VERSION-} ]]; then print %m; else printf "%s" \\h; fi)"$space${a_sep_fg}""${b_bg}${sep}${b_fg}${b_bg}${space}"$USER"$space${b_sep_fg}""${c_bg}${sep}${c_fg}${c_bg}${space}"$(__promptline_cwd)"$space${c_sep_fg}"$(__promptline_vcs_branch "${y_bg}${sep}${y_fg}${y_bg}${space}" "$space${y_sep_fg}")$(__promptline_last_exit_code "${warn_bg}${sep}${warn_fg}${warn_bg}${space}" "$space${warn_sep_fg}")${reset_bg}${sep}$reset$space"
  fi
}

if [[ -n ${ZSH_VERSION-} ]]; then
  if [[ ! ${precmd_functions[(r)__promptline]} == __promptline ]]; then
    precmd_functions+=(__promptline)
  fi
else
  PROMPT_COMMAND=__promptline
fi
